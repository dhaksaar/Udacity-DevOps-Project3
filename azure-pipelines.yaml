name: Azure Pipelines
variables:
  python.version: '3.7.6'
stages:
- stage: provision_infrastructure
  jobs:
  - job:  provision_infrastructure
    displayName: Provision Infrastructure
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: DownloadSecureFile@1
      displayName: Download terraform.tfvars 
      inputs:
        secureFile: 'terraform.tfvars'

    - task: Bash@3
      displayName: Copy terraform.tfvars 
      inputs:
          targetType: 'inline'
          script: cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'known_hosts'
        sshPublicKey: $(SSH-Public-Key)
        sshKeySecureFile: 'id_rsa'
    
    - task: TerraformInstaller@0
      displayName: Install Terraform
      inputs:
          terraformVersion: 'v0.15.4'
      
    - task: TerraformTaskV2@2
      displayName: "Terraform Init"
      inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: 'azrm-sc'
          backendAzureRmResourceGroupName: 'project3'
          backendAzureRmStorageAccountName: 'daxproj3tf'
          backendAzureRmContainerName: 'terraform'
          backendAzureRmKey: 'terraform.tfstate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
      
    - task: TerraformTaskV2@2
      inputs:
          provider: 'azurerm'
          command: 'validate'
    - task: TerraformTaskV2@2
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: |
          -auto-approve 
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceNameAzureRM: 'azrm-sc'
  
    - task: DownloadSecureFile@1
      displayName: Download private key 
      inputs:
        secureFile: 'id_rsa'

    - task: Bash@3
      displayName: Copy Private key 
      inputs:
          targetType: 'inline'
          script: cp $(Agent.TempDirectory)/id_rsa $(System.DefaultWorkingDirectory)/terraform

    - bash: |
        terraform output
        export VM_PUBLIC_IP=$(terraform output -raw publicip)
        echo $VM_PUBLIC_IP
      displayName: Get VM Public IP Address
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    

- stage: Build
  jobs:
  - job:  Build
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    #- task: DownloadSecureFile@1
    # Needed for Terraform VM deployment
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING'
    #     sshPublicKey: 'PUBLIC_KEY'
    #     sshKeySecureFile: 'id_rsa'
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi


- stage: Deployment
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'azrm-sc'
              appName: 'DaxinDemoApp-AppService'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip

  - deployment: setup_vm
    displayName: Setup Virtual Machine
    environment:
      name: 'TEST2'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
              sudo apt-get update -y
              sudo apt-get install python3-pip -y
              sudo apt-get install -y chromium-browser
              sudo apt-get install -y chromium-chromedriver
              python3 -m pip install --upgrade pip
              pip3 install selenium
              chromium-browser -version
              chromedriver -version
            displayName: Install selenium


- stage: Test
  jobs:
  - job: Regression_Testing
    displayName: Regression Testing with Postman
    pool: 
      vmImage: 'ubuntu-18.04'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'    
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'npm install -g newman'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'newman run automatedtesting/postman/RegressionTest.json  -e automatedtesting/postman/Udacity_Project.postman_environment.json --reporters cli,junit --reporter-junit-export RegressionTest.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'RegressionTest.xml'
        
  - job:  Performance_Testing
    displayName: Performance Testing with JMeter
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: JMeterInstaller@0
      inputs:
        jmeterVersion: '5.4.1'
    - bash: jmeter -n -t automatedtesting/jmeter/StressTest.jmx -l log/jmeter/StressTest-result.csv -e -f -o log/jmeter/StressTest-html-report  -j log/jmeter/StressTest.log
    
    - bash: jmeter -n -t automatedtesting/jmeter/EnduranceTest.jmx -l log/jmeter/EnduranceTest-result.csv -e -f -o log/jmeter/EnduranceTest-html-report  -j log/jmeter/EnduranceTest.log
  
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/StressTest-html-report'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/JMeterStressTestReport.zip'
        replaceExistingArchive: true
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/EnduranceTest-html-report'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/JMeterEnduranceTestReport.zip'
        replaceExistingArchive: true
    
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/JMeterStressTestReport.zip'
        artifact: 'JMeterStressTestReport'
        publishLocation: 'pipeline'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/JMeterEnduranceTestReport.zip'
        artifact: 'JMeterEnduranceTestReport'
        publishLocation: 'pipeline'

- stage: destroy_infrastructure
  jobs:
  - job:  destroy_infrastructure
    displayName: Destroy Infrastructure
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: DownloadSecureFile@1
      displayName: Download terraform.tfvars 
      inputs:
        secureFile: 'terraform.tfvars'

    - task: Bash@3
      displayName: Copy terraform.tfvars 
      inputs:
          targetType: 'inline'
          script: cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform
           
#    - task: TerraformInstaller@0
#      displayName: Install Terraform
#      inputs:
#          terraformVersion: 'v0.15.4'
      
#    - task: TerraformTaskV2@2
#      displayName: "Terraform Init"
#      inputs:
#          provider: 'azurerm'
#          command: 'init'
#          backendServiceArm: 'Project3'
#          backendAzureRmResourceGroupName: 'project3'
#          backendAzureRmStorageAccountName: 'daxproj3tf'
#          backendAzureRmContainerName: 'terraform'
#          backendAzureRmKey: 'terraform.tfstate'
#          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
      
#    - task: TerraformTaskV2@2
#      inputs:
#        provider: 'azurerm'
#        command: 'destroy'
#        commandOptions: |
#          -auto-approve 
#        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#        environmentServiceNameAzureRM: 'Project3'


  # - deployment: VMDeploy
  #   displayName: NAME
  #   environment:
  #     name:  ENVIRONMENT NAME
  #     resourceType: VirtualMachine
  #     tags: TAG NAME
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: Bash@3
  #           inputs:
  #             targetType: 'inline'
  #             script: |
  #               #! /bin/bash              
  #               sudo apt-get upgrade -y
  #               sudo apt-get install python3-pip -y
  #               sudo apt-get install unzip -y
  #               sudo apt-get install -y chromium-browser
  #               pip3 install selenium
  #               export PATH=$PATH:some/path


